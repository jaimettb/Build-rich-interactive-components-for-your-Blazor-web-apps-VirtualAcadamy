@page "/fetchdata"
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th></th>
                <th>Temp. (C)</th>
                <th></th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>
                        <canvas data-width="100" 
                                data-type="linear-gauge" 
                                data-units="°C" 
                                data-min-value="-20" 
                                data-max-value="60" 
                                data-major-ticks="-20, -10, 0, 10, 20, 30, 40, 50, 60"
                                data-value="@forecast.TemperatureC">>
                        </canvas>
                     </td>
                    <td>@forecast.TemperatureC</td>
                    <td>
                        <canvas data-width="100" 
                                  data-type="linear-gauge" 
                                  data-units="°F" 
                                  data-min-value="-10" 
                                  data-max-value="150" 
                                  data-major-ticks="-20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 130, 140, 150"
                                  data-value="@forecast.TemperatureF">
                        </canvas>                    
                    </td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<div style="height:600px" @ref=graphPlaceholder></div>

@code {
    private WeatherForecast[]? forecasts;
    private ElementReference graphPlaceholder;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("js/weather.json");

            await JS.InvokeVoidAsync("changeTitle", "Weather Forecast - changed");

            var forecastTemperatures = (from t in forecasts
                                        select t.TemperatureC).ToArray();

            await JS.InvokeVoidAsync("showGraph", graphPlaceholder, forecastTemperatures);

            StateHasChanged();
        }
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
